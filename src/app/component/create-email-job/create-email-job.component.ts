import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { EmailJobDTO, FrequencyEnum } from '../../models/email-job.dto.model';

@Component({
  selector: 'app-create-email-job',
  templateUrl: './create-email-job.component.html',
  styleUrls: ['./create-email-job.component.css']
})
export class CreateEmailJobComponent implements OnInit {
  emailJobForm: FormGroup;

  constructor(private formBuilder: FormBuilder) {
    // Initialize the form group here to avoid the TS2564 error
    this.emailJobForm = this.formBuilder.group({});
  }

  ngOnInit(): void {
    this.initializeForm();
  }

  private initializeForm(): void {
    this.emailJobForm = this.formBuilder.group({
      startDate: ['', Validators.required],
      endDate: [''],
      enabled: [true, Validators.required],
      emailTemplateUuid: ['', Validators.required],
      senderUuid: ['', Validators.required],
      receivers: ['', Validators.required],  // Ensure this is treated as a string
      frequency: [FrequencyEnum.DAILY, Validators.required]  // Default value
    });
  }

  onSubmit(): void {
    if (this.emailJobForm.valid) {
      // Ensure 'receivers' is treated as a string and then split it
      const receiversInput = this.emailJobForm.get('receivers')?.value as string;
      const receivers: string[] = receiversInput.split(',').map((receiver: string) => receiver.trim());

      const newJob: EmailJobDTO = {
        uuid: '',  // This would be generated by the backend
        startDate: new Date(this.emailJobForm.get('startDate')?.value),
        endDate: this.emailJobForm.get('endDate')?.value ? new Date(this.emailJobForm.get('endDate')?.value) : undefined,
        enabled: this.emailJobForm.get('enabled')?.value,
        emailTemplate: {
          uuid: this.emailJobForm.get('emailTemplateUuid')?.value
        },
        sender: {
          uuid: this.emailJobForm.get('senderUuid')?.value
        },
        receivers: receivers,
        frequency: this.emailJobForm.get('frequency')?.value,
        occurrences: []  // Ensure this matches the `OccurrenceDTO` type
      };

      console.log('New Email Job:', newJob);
      // Call your service to save the new job, e.g., this.emailJobService.createJob(newJob)
    } else {
      console.error('Form is invalid');
      this.emailJobForm.markAllAsTouched(); // Ensure all errors are visible to the user
    }
  }
}
